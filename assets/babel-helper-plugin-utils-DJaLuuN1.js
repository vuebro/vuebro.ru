var i={},c;function f(){if(c)return i;c=1,Object.defineProperty(i,"__esModule",{value:!0}),i.declare=a,i.declarePreset=void 0;const s={assertVersion:r=>e=>{b(e,r.version)}};Object.assign(s,{targets:()=>()=>({}),assumption:()=>()=>{},addExternalDependency:()=>()=>{}});function a(r){return(e,o,n)=>{let t;for(const l of Object.keys(s))e[l]||(t??(t=u(e)),t[l]=s[l](t));return r(t??e,o||{},n)}}i.declarePreset=a;function u(r){let e=null;return typeof r.version=="string"&&/^7\./.test(r.version)&&(e=Object.getPrototypeOf(r),e&&(!hasOwnProperty.call(e,"version")||!hasOwnProperty.call(e,"transform")||!hasOwnProperty.call(e,"template")||!hasOwnProperty.call(e,"types"))&&(e=null)),Object.assign({},e,r)}function b(r,e){if(typeof r=="number"){if(!Number.isInteger(r))throw new Error("Expected string or integer value.");r=`^${r}.0.0-0`}if(typeof r!="string")throw new Error("Expected string or integer value.");const o=Error.stackTraceLimit;typeof o=="number"&&o<25&&(Error.stackTraceLimit=25);let n;throw e.slice(0,2)==="7."?n=new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${e}". You'll need to update your @babel/core version.`):n=new Error(`Requires Babel "${r}", but was loaded with "${e}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`),typeof o=="number"&&(Error.stackTraceLimit=o),Object.assign(n,{code:"BABEL_VERSION_UNSUPPORTED",version:e,range:r})}return i}var d=f();export{d as l,f as r};
