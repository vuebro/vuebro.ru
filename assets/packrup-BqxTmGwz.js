function l(u,e){const a=[],r=e.resolveKeyData||(t=>t.key),n=e.resolveValueData||(t=>t.value);for(const[t,y]of Object.entries(u))a.push(...(Array.isArray(y)?y:[y]).map(k=>{const c={key:t,value:k},f=n(c);return typeof f=="object"?l(f,e):Array.isArray(f)?f:{[typeof e.key=="function"?e.key(c):e.key]:r(c),[typeof e.value=="function"?e.value(c):e.value]:f}}).flat());return a}function V(u,e){return Object.entries(u).map(([a,r])=>{if(typeof r=="object"&&(r=V(r,e)),e.resolve){const n=e.resolve({key:a,value:r});if(typeof n<"u")return n}return typeof r=="number"&&(r=r.toString()),typeof r=="string"&&e.wrapValue&&(r=r.replace(new RegExp(e.wrapValue,"g"),`\\${e.wrapValue}`),r=`${e.wrapValue}${r}${e.wrapValue}`),`${a}${e.keyValueSeparator||""}${r}`}).join(e.entrySeparator||"")}export{V as a,l as u};
