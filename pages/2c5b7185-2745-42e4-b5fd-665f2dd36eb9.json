{"script":"import { inject } from \"vue\";\nconst { id } = defineProps([\"id\"]);\nconst pages = inject(\"pages\");\nconst the = pages[id];\nconst { location: { origin } } = window;\nconst type = ['primary', 'success', 'info', 'warning', 'danger'];\nconst times = [\n    {\n        timestamp: \"10 мин.\",\n        header: \"Настроить хостинг в облаке\",\n        description: [{\n            text: `\n            Настроить хостинг в облаке легче, чем это кажется.\n            Просто следуете указаниям в инструкции от облачного провайдера и нажимаете на кнопки в его личном кабинете.\n            По большому счету, при должной сноровке на настройку нового хостинга нужно не более пяти минут.\n            Готовьтесь, что в первый раз потратите много времени на вдумчивое чтение инструкций.`,\n            code: \"\",\n            language: \"\",\n            src: \"\",\n        }],\n        to: [\"хостинг\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Скачать и установить vueS3, либо просто открыть веб приложение\",\n        description: [{\n            text: `\n            VueS3 доступен под основные платформы: macOS, Windows, Linux, которые можно загрузить в разделе \"Загрузка\".\n            Установщики собираются автоматически с помощью GitHub Actions из исходников, размещенных на GitHub, поэтому полностью соответствуют исходным кодам и безопасны к установке.\n            Однако, для начала, рекомендуется воспользоваться веб версией, тем самым вы сэкономите время на скачивание и установку.\n            Просто откройте ее в браузере и приступайте к созданию сайта.`,\n            code: \"\",\n            language: \"\",\n            src: \"\",\n        }],\n        to: [\"загрузка\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Подключить аккаунт и войти\",\n        description: [{\n            text: `\n            Самое время совместить результаты сделанного. Запустите vueS3, нажмите на кнопку \"+\" и заполните появившуюся форму данными, полученными на этапе настройки хостинга в облаке.\n            После заполнения формы, нажмите на кнопку OK. Ваша учетная запись появится в списке учетных записей. Для безопасности можно защитить учетную запись пинкодом.\n            Делать это не обязательно, но только в том случае, если вы на 100% уверены в безопасности своего компьютера.\n            В ином случае, нажмите на иконку замка, введите пинкод и ваша учетка теперь хранится в зашифрованном виде.\n            Никто, не зная пинкода, не может ее отредактировать или войти в нее.\n            Теперь осталось только войти, для этого кликните на учетную запись. Если все настроено верно, откроется новый проект сайта, состоящий из пустой корневой страницы.`,\n            code: \"\",\n            language: \"\",\n            src: \"/images/74c24adb-45ef-4225-8f8c-7f14bcc56864.png\",\n        }],\n        to: [],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Подключить фреймворк\",\n        description: [{\n            text: `В правом верхнем углу нажмите на пиктограмму меню и выберите пункт \"Import Map\".\n            Давайте подключим фреймворк Element Plus. Не надо зацикливаться на выборе именно этого фреймворка, он не лучше и не хуже чем другие.\n            Со своими плюсами и минусами. Итак, добавим для \"element-plus\" ссылку \"https://unpkg.com/element-plus@^2/dist/index.full.min.mjs\" и для \"@element-plus/icons-vue\" ссылку \"https://unpkg.com/@element-plus/icons-vue@^2/dist/index.min.js\".\n            Все, фреймворк добавлен, можно им пользоваться в соответствии с документацией.`,\n            code: \"\",\n            language: \"\",\n            src: \"/images/f6c6095f-de2f-4a71-bf36-2fb7664178fb.png\",\n        }],\n        to: [\"модули\", \"документация/модули\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Оформить корневую страницу\",\n        description: [{\n            text: `Первым делом, сверяемся с документацией фреймворка и добавляем его к приложению vue.\n            Делается это один раз, а потому как фреймворк будем использовать на всех страницах, подключаем его прямиком на корневой странице.`,\n            code: `/** Импортируются стили фреймворка element-plus */\nimport \"https://unpkg.com/element-plus@^2/dist/index.css\";\n/** Импортируется исполняемая часть фреймворка element-plus */\nimport ElementPlus from \"element-plus\";\n/** Импортируеся иконка будильника */\nimport { AlarmClock } from \"@element-plus/icons-vue\";\n/**  Фреймворк element-plus регистрируется в приложении vue */\nwindow.app.use(ElementPlus.default);`,\n            language: \"js\",\n            src: \"/images/fa14b048-2a28-4e55-a47a-2265ff99df2e.png\",\n        }, {\n            text: `Если на странице понадобилась семантика страниц, чаще всего названия страниц, описания, их иконки, то необходимо эту семантику к странице подключить.\n            Делать это нужно для каждой страницы, где понадобится семантика. Ну, и конечно, не забываем прописать заголовок корневой страницы: \"Быстрый старт\"\n            и её описание: \"Быстрый старт в vueS3 с минимальным шагом в 5 минут\", в меню страницы в правой части экрана vueS3.`,\n            code: `/** Импортируется вычислитель и инжектор */\nimport { computed, inject } from \"vue\";\n/** Подключение id страницы из props */\nconst { id } = defineProps([\"id\"]);\n/** Инжектирование ассоциативного массива семантических объектов страниц */\nconst pages = inject(\"pages\");\n/** Получение семантического объекта текущей страницы */\nconst the = pages[id];\n/** Инжектирование id выбранной страницы */\nconst selId = inject(\"id\");\n/** Вычисление семантического объекта выбранной страницы */\nconst sel = computed(() => pages[selId.value]);`,\n            language: \"js\",\n            src: \"/images/5420ee83-a659-437e-b899-382f7a00bdb7.png\",\n        }, {\n            text: `Добавляем шаблон корневой страницы. Здесь следует обратить внимание на то, что шаблон корневой страницы является базовым и будет показываться на всех других страницах.\n            Так что если вам нужен \"заголовок\" или \"подвал сайта\", одинаковый для всех страниц, отличная идея добавить их в шаблон корневой страницы.\n            Ну а все остальные страницы из дерева сайта будут отображаться там, где будет установлен таг роутера vue - <router-view />.\n            Также обратите внимание на то, что по умолчанию подключены классы tailwind css, которые можно использовать без каких-либо дополнительных настроек.`,\n            code: `<!--\nКонтейнер минимальной высотой в высоту экрана.\nНужен для того чтобы при загрузке на экране не мелькал футер.\n-->\n<div class=\"min-h-dvh\" un-cloak>\n  <!-- Плашка вверху страницы -->\n  <el-page-header :icon=\"AlarmClock\" :content=\"sel.title\" :title=\"the.title\" @back=\"$router.push('/')\"\n    class=\"sticky top-0 z-50 pa-4 border-b bg-neutral-50\" />\n  <!-- Вьювер для загрузки выбранных страниц из дерева -->\n  <router-view></router-view>\n</div>\n<!-- Футер -->\n<div class=\"flex flex-col gap-8 items-center bg-neutral-200 pa-12 not-prose\" un-cloak>\n  <!-- Меню по дочерним объектам корневой страницы -->\n  <el-button-group><el-button v-for=\"{ title, to } in the.$children\" tag=\"router-link\" :to=\"to\">{{ title\n      }}</el-button></el-button-group>\n  <!-- Отображение описания корневой страницы в футере -->\n  <el-text>{{ the.description }}</el-text>\n</div>`,\n            language: \"xml\",\n            src: \"/images/83e2ec96-c361-4bc4-8e1f-2853d5b39687.png\",\n        }],\n        to: [\"документация/модули\", \"документация/шаблон\", \"документация/семантика\", \"документация/unocss\", \"документация/seo\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Добавить страницу 1\",\n        description: [{\n            text: `Инжектируем семантику сайта на также как на корневую страницу. Не забываем прописать заголовок корневой страницы: \"Главный заголовок сайта\"\n            и её описание: \"Основное описание сайта\", а также иконку \"mdi:alarm\", в меню страницы в правой части экрана vueS3.`,\n            code: `/** Импортируется инжектор */\nimport { inject } from \"vue\";\n/** Подключение id страницы из props */\nconst { id } = defineProps([\"id\"]);\n/** Инжектирование ассоциативного массива семантических объектов страниц */\nconst pages = inject(\"pages\");\n/** Получение семантического объекта текущей страницы */\nconst the = pages[id];`,\n            language: \"js\",\n            src: \"/images/5dee68c0-894a-4538-9acf-bafc7634cc02.png\",\n        }, {\n            text: `Делаем большой баннер с выводом семантики текущей страницы: иконки, названия и описания.`,\n            code: `<!-- Адаптивный контейнер с отступами -->\n<div class=\"container mx-auto px-4 py-24\" un-cloak>\n  <!-- Карточка с центрированием содежимого -->\n  <el-card body-class=\"h-96 flex flex-col items-center justify-center text-center\">\n    <!-- Отображение иконки текущей страницы -->\n    <div :class=\"the.i\" class=\"size-12\"></div>\n    <!-- Отображение заголовка текущей страницы -->\n    <h2>{{ the.title }}</h2>\n    <!-- Отображение описания текущей страницы -->\n    <p>{{ the.description }}</p>\n  </el-card>\n</div>`,\n            language: \"xml\",\n            src: \"/images/8856c274-d6ba-4ed3-92ef-b88447b6076d.png\",\n        }],\n        to: [\"документация/шаблон\", \"документация/семантика\", \"документация/unocss\", \"документация/seo\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Добавить страницу 2\",\n        description: [{\n            text: `Инжектируем семантику сайта на также как на корневую страницу. Не забываем прописать заголовок корневой страницы: \"Чем мы заняты\"\n            и её описание: \"Мы делаем первый шаг к созданию сайта на vueS3\", в меню страницы в правой части экрана vueS3.`,\n            code: `/** Импортируется инжектор */\nimport { inject } from \"vue\";\n/** Подключение id страницы из props */\nconst { id } = defineProps([\"id\"]);\n/** Инжектирование ассоциативного массива семантических объектов страниц */\nconst pages = inject(\"pages\");\n/** Получение семантического объекта текущей страницы */\nconst the = pages[id];`,\n            language: \"js\",\n            src: \"/images/ccd0d9af-5e06-41ec-879e-cf56fd31bae2.png\",\n        }, {\n            text: `Теперь добавим массив объектов с описанием карточек, которые будут выведены на второй странице.`,\n            code: `/** Массив содержимого карточек */\nconst features = [\n    {\n        name: \"Самый простой сайт\",\n        description: \"Мы делаем самый простой сайт на vueS3\"\n    },\n    {\n        name: \"Самый быстрый сайт\",\n        description: \"Мы делаем сайт на vueS3 очень быстро\"\n    },\n    {\n        name: \"Самый технологичный сайт\",\n        description: \"Мы делаем сайт, используя самые современные технологии\"\n    }\n]`,\n            language: \"js\",\n            src: \"/images/2fe0f752-40aa-4b6e-92b5-f3fb9057864b.png\",\n        }, {\n            text: `Ну а следом добавим на страницу шаблон, который выводит карточки на основе уже созданного массива.`,\n            code: `<!-- Адаптивный контейнер с отступами -->\n<div class=\"container mx-auto px-4 py-24 text-center\" un-cloak>\n    <!-- Отображение заголовка текущей страницы -->\n    <h3>{{ the.title }}</h3>\n    <!-- Отображение описания текущей страницы -->\n    <p class=\"mb-24\">{{ the.description }}</p>\n    <!-- Адаптивная сетка для отображения карточек -->\n    <div class=\"grid grid-cols-4 gap-6 gap-y-12 lg:grid-cols-12 not-prose\">\n        <!-- Вывод карточек из массива содержимого -->\n        <div class=\"col-span-4 flex flex-col items-center text-center\" v-for=\"({name, description}, index) in features\">\n            <!-- Иконка номера карточки -->\n            <div class=\"size-6 text-emerald-500 \" :class=\"\\`i-mdi:numeric-\\${index + 1}-circle-outline\\`\"></div>\n            <!-- Заголовок карточки -->\n            <h3 class=\"my-4 text-lg leading-6 text-slate-700\">{{ name }}</h3>\n            <!-- Описание карточки -->\n            <p class=\"text-slate-500\">{{ description }}</p>\n        </div>\n    </div>\n</div>`,\n            language: \"xml\",\n            src: \"/images/ebf281eb-8f86-449f-a106-46c1d42d1651.png\",\n        }],\n        to: [\"документация/шаблон\", \"документация/семантика\", \"документация/unocss\", \"документация/seo\"],\n    },\n    {\n        timestamp: \"5 мин.\",\n        header: \"Добавить страницу 3\",\n        description: [{\n            text: `Инжектируем семантику сайта на также как на корневую страницу. Не забываем прописать заголовок корневой страницы: \"Основной текст\"\n            и её описание: \"Текст был сгенерирован случайным образом\", в меню страницы в правой части экрана vueS3.`,\n            code: `/** Импортируется инжектор */\nimport { inject } from \"vue\";\n/** Подключение id страницы из props */\nconst { id } = defineProps([\"id\"]);\n/** Инжектирование ассоциативного массива семантических объектов страниц */\nconst pages = inject(\"pages\");\n/** Получение семантического объекта текущей страницы */\nconst the = pages[id];`,\n            language: \"js\",\n            src: \"/images/56efb35d-478c-49ed-a323-ead01e862685.png\",\n        }, {\n            text: `Подключаем библиотеку для генерации случайного текста и сразу же используем её, получая на выходе 12 бессмысленных абзацев.`,\n            code: `/** Импортируется генератор случайного текста */\nimport { getParagraph } from \"https://unpkg.com/speech-code@^2/index.js\";\n/** Массив из 12 абзацев случайного текста */\nconst text = Array(12).fill().map(() => getParagraph());`,\n            language: \"js\",\n            src: \"/images/2f63934f-8672-4a02-a746-91f5c5a88609.png\",\n        }, {\n            text: `В завершении выводим бессмысленный текст на экран с помощью простого шаблона.`,\n            code: `<!-- Адаптивный контейнер с отступами -->\n<div class=\"container mx-auto px-4 py-24\">\n    <!-- Отображение заголовка текущей страницы -->\n    <h3 class=\"text-center\">{{ the.title }}</h3>\n    <!-- Отображение описания текущей страницы -->\n    <p class=\"text-center mb-12\">{{ the.description }}</p>\n    <!--  Вывод массива абзацев случайного текста -->\n    <p v-for=\"paragraph in text\" class=\"text-justify\">{{ paragraph }}</p>\n</div>`,\n            language: \"xml\",\n            src: \"/images/a4e1d98f-6c96-40f5-b097-274166c237c1.png\",\n        }],\n        to: [\"документация/шаблон\", \"документация/семантика\", \"документация/unocss\", \"документация/seo\"],\n    },\n    {\n        timestamp: \"Итог: 45 мин.\",\n        header: \"Результат\",\n        description: [{\n            text: `В результате, за 45 минут, или скорее всего еще быстрее, можно без проблем сделать простой сайт, который уже доступен в сети интернет.\n            Обратите внимание, что страницы выводятся на одном экране. При необходимости, можно сделать классический вывод по одной странице на экран.\n            Для этого, у родительской страницы (в нашем примере это будет корневая страница), снимите галочку у параметра alone, в меню страницы в правой части экрана vueS3.`,\n            code: \"\",\n            language: \"\",\n            src: \"/images/322d90f0-2abe-4b0b-9ae1-89c73b5ab1d6.png\",\n        }],\n        to: [],\n    },\n];","style":"","template":"<div class=\"container mx-auto px-4\" un-cloak>\n  <div class=\"flex flex-col text-center not-prose mb-12\">\n    <icon :icon=\"the.icon\" class=\"size-20 mx-auto\"></icon>\n    <h2 class=\"text-4xl my-5 font-['Caveat']\">{{ the.title }}</h2>\n    <el-text size=\"large\">{{ the.description }}</el-text>\n  </div>\n  <el-alert title=\"Отладка\" type=\"success\" :closable=\"false\" show-icon>\n    vueS3 система безсерверная, сборка сайта происходит прямиком в браузере пользователя и главный инструмент охоты за\n    ошибками - консоль разработчика в браузере.\n    Поэтому открываете разрабатываемый сайт в браузере, нажимаете <el-tag>Ctrl+Shift+I</el-tag> и Б-г в помощь.\n  </el-alert>\n  <h3 class=\"text-slate-600\">Итак рассмотрим, что нужно для создания самого простого сайта в vueS3</h3>\n  <el-text>\n    Минимальный шаг взят в 5 минут, это означает, что есть еще время заварить чайку на этом шаге.\n    По факту, временные интервалы указаны с запасом, хотя в первый раз можно провозиться приличное время по неопытности.\n  </el-text>\n  <el-timeline class=\"not-prose !mt-12\">\n    <el-timeline-item :timestamp=\"timestamp\" placement=\"top\" v-for=\"{timestamp, header, description, to, src} in times\">\n      <el-card shadow=\"hover\">\n        <template #header><el-text tag=\"b\">{{ header }}</el-text></template>\n        <template #footer v-if=\"to.length\"><el-text tag=\"b\" type=\"info\">Ссылки по теме</el-text>\n          <div class=\"mt-4 gap-4 flex flex-wrap\"><span v-for=\"(link, index) in to\"><el-button tag=\"router-link\"\n              :to=\"`/${link}/`\" :type=\"type[index%5]\">{{ link }}</el-button></span></div>\n        </template>\n        <div class=\"grid grid-cols-1 gap-6 lg:grid-cols-8\" v-for=\"({text, code, language, src}, index) in description\">\n          <el-divider class=\"col-span-1 lg:col-span-8 !mt-10\" v-if=\"index\">⭐</el-divider>\n          <div class=\"col-span-1\" :class=\"`lg:col-span-${src?5:8}`\">\n            <el-text>{{ text }}</el-text>\n            <highlightjs :language=\"language\" :code=\"code\" v-if=\"code\" class=\"my-6\"></highlightjs>\n          </div>\n          <div class=\"col-span-1 lg:col-span-3\" v-if=\"src\"><el-image :src=\"src\" :preview-src-list=\"[src]\" v-if=\"src\"\n              class=\"w-full h-auto border rounded-lg shadow-xl\" />\n          </div>\n        </div>\n      </el-card>\n    </el-timeline-item>\n  </el-timeline>\n</div>"}