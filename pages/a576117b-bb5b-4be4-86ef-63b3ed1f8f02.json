{"script":"import { ref, computed, inject } from \"vue\";\nconst props = defineProps([\"id\"]);\nconst pages = inject(\"pages\");\nconst the = pages[props.id];\n\nconst first = [{\n    icon: \"logos:vue\",\n    title: \"Vue.S3 полностью поддерживает однофайловые компоненты Vue (SFC)\",\n    description: \"Vue (произносится /vjuː/, примерно как view) — JavaScript фреймворк для создания пользовательских интерфейсов. Он создан на стандартах HTML, CSS и JavaScript и предоставляет декларативную и компонентную модель программирования, которая помогает эффективно разрабатывать пользовательские интерфейсы любой сложности.\"\n}, {\n    icon: \"logos:unocss\",\n    title: \"UnoCSS работает в Vue.S3 \\\"из коробки\\\" в runtime режиме\",\n    description: \"UnoCSS — мгновенный (instant) атомарный CSS‑движок с максимальной производительностью и гибкостью.\"\n}];\n\nconst second = [{\n    title: \"Пример использования Vue.js\",\n    description: \"Ниже приведен пример из интерактивного учебника по Vue.js. Для просмотра результата выполнения кликните на закладку \\\"Результат\\\".\"\n}, {\n    title: \"Пример использования UnoCSS\",\n    description: \"Ниже приведен пример из документации по Tailwind CSS. Для просмотра результата выполнения кликните на закладку \\\"Результат\\\".\"\n}];\n\n\nconst third = [{\n    html: `<form @submit.prevent=\"addTodo\">\n    <input v-model=\"newTodo\" required placeholder=\"new todo\">\n    <button>Добавить задачу</button>\n</form>\n<ul>\n    <li v-for=\"todo in filteredTodos\" :key=\"todo.id\">\n      <input type=\"checkbox\" v-model=\"todo.done\">\n      <span :class=\"{ done: todo.done }\">{{ todo.text }}</span>\n      <button @click=\"removeTodo(todo)\">X</button>\n    </li>\n</ul>\n<button @click=\"hideCompleted = !hideCompleted\">\n    {{ hideCompleted ? 'Показать все' : 'Скрыть выполненные' }}\n</button>`,\n    js: `import { ref, computed } from 'vue'\n\nlet id = 0\n\nconst newTodo = ref('')\nconst hideCompleted = ref(false)\nconst todos = ref([\n  { id: id++, text: 'Изучить HTML', done: true },\n  { id: id++, text: 'Изучить JavaScript', done: true },\n  { id: id++, text: 'Изучить Vue', done: false }\n])\n\nconst filteredTodos = computed(() => {\n  return hideCompleted.value\n    ? todos.value.filter((t) => !t.done)\n    : todos.value\n})\n\nfunction addTodo() {\n  todos.value.push({ id: id++, text: newTodo.value, done: false })\n  newTodo.value = ''\n}\n\nfunction removeTodo(todo) {\n  todos.value = todos.value.filter((t) => t !== todo)\n}`,\n    css: `.done {\n  text-decoration: line-through;\n}`\n},\n{\n    html: `<div class=\"mx-6 mb-6 p-6 max-w-sm bg-white rounded-xl shadow-lg flex items-center space-x-4\">\n    <div class=\"shrink-0\">\n        <icon icon=\"token-branded:chat\" class=\"size-12\"></icon>\n    </div>\n    <div>\n        <div class=\"text-xl font-medium text-black\">ChitChat</div>\n        <p class=\"text-slate-500\">У вас новое сообщение!</p>\n    </div>\n</div>`\n}];\n\nconst fourth = [{\n    title: \"Что почитать про Vue.js?\",\n    links: [{\n        subtitle: \"Интерактивный учебник\",\n        href: \"https://ru.vuejs.org/tutorial\"\n    }, {\n        subtitle: \"Руководство\",\n        href: \"https://ru.vuejs.org/guide/introduction.html\"\n    }]\n}, {\n    title: \"Что почитать про атомарный CSS?\",\n    links: [{\n        subtitle: \"Интерактивная документация UnoCSS\",\n        href: \"https://unocss.dev/interactive\"\n    }, {\n        subtitle: \"Документация Tailwind CSS\",\n        href: \"https://tailwindcss.ru/docs/utility-first\"\n    }]\n}];\n\nlet id = 0\n\nconst newTodo = ref('')\nconst hideCompleted = ref(false)\nconst todos = ref([{\n    id: id++,\n    text: 'Изучить HTML',\n    done: true\n},\n{\n    id: id++,\n    text: 'Изучить JavaScript',\n    done: true\n},\n{\n    id: id++,\n    text: 'Изучить Vue',\n    done: false\n}\n])\n\nconst filteredTodos = computed(() => {\n    return hideCompleted.value ?\n        todos.value.filter((t) => !t.done) :\n        todos.value\n})\n\nfunction addTodo() {\n    todos.value.push({\n        id: id++,\n        text: newTodo.value,\n        done: false\n    })\n    newTodo.value = ''\n}\n\nfunction removeTodo(todo) {\n    todos.value = todos.value.filter((t) => t !== todo)\n}","style":".done {\n    text-decoration: line-through;\n}","template":"<div class=\"container mx-auto my-24\" un-cloak>\n    <div class=\"text-center\">\n        <h2>{{ the.title }}</h2>\n        <el-text size=\"large\">{{ the.description }}</el-text>\n    </div>\n</div>\n<div class=\"grid grid-cols-1 2xl:grid-cols-2 gap-4 mx-4\" un-cloak>\n    <div class=\"text-center flex flex-col 2xl:row-start-auto\" v-for=\"({title, description, icon},index) in first\"\n        :class=\"{ 'row-start-5': index }\">\n        <icon class=\"size-24 mx-auto\" :icon=\"icon\"></icon>\n        <h2>{{ title }}</h2>\n        <el-text size=\"large\">{{ description }}</el-text>\n    </div>\n    <el-alert :title=\"title\" type=\"info\" :description=\"description\" show-icon :closable=\"false\"\n        v-for=\"({title, description},index) in second\" class=\"2xl:row-start-auto\"\n        :class=\"{ 'row-start-6': index }\"></el-alert>\n    <el-tabs class=\"not-prose 2xl:row-start-auto\" v-for=\"({html,js,css},index) in third\"\n        :class=\"{ 'row-start-7': index }\">\n        <el-tab-pane label=\"Template\">\n            <highlightjs language=\"html\" :code=\"html\"></highlightjs>\n        </el-tab-pane>\n        <el-tab-pane label=\"Script\" v-if=\"js\">\n            <highlightjs language=\"js\" :code=\"js\"></highlightjs>\n        </el-tab-pane>\n        <el-tab-pane label=\"Style\" v-if=\"css\">\n            <highlightjs language=\"css\" :code=\"css\"></highlightjs>\n        </el-tab-pane>\n        <el-tab-pane label=\"Результат\" v-if=\"index\">\n            <div class=\"mx-6 mb-6 p-6 max-w-sm bg-white rounded-xl shadow-lg flex items-center space-x-4\">\n                <div class=\"shrink-0\">\n                    <icon icon=\"token-branded:chat\" class=\"size-12\"></icon>\n                </div>\n                <div>\n                    <div class=\"text-xl font-medium text-black\">ChitChat</div>\n                    <p class=\"text-slate-500\">У вас новое сообщение!</p>\n                </div>\n            </div>\n        </el-tab-pane>\n        <el-tab-pane label=\"Результат\" v-else>\n            <form @submit.prevent=\"addTodo\">\n                <el-input v-model=\"newTodo\" required placeholder=\"new todo\"><template #append><el-button\n                            native-type=\"submit\">Добавить задачу</el-button></template></el-input>\n            </form>\n            <ul class=\"my-2\">\n                <li v-for=\"todo in filteredTodos\" :key=\"todo.id\">\n                    <el-input readonly :class=\"{ done: todo.done }\" v-model=\"todo.text\">\n                        <template #prepend><el-checkbox v-model=\"todo.done\"></el-checkbox></template>\n                        <template #append><el-button @click=\"removeTodo(todo)\">X</el-button></template>\n                    </el-input>\n                </li>\n            </ul>\n            <el-button @click=\"hideCompleted = !hideCompleted\">\n                {{ hideCompleted ? 'Показать все' : 'Скрыть выполненные' }}\n            </el-button>\n        </el-tab-pane>\n    </el-tabs>\n    <el-alert :title=\"title\" type=\"success\" :closable=\"false\" show-icon v-for=\"({title, links},index) in fourth\"\n        :class=\"{ 'row-start-8': index }\" class=\"2xl:row-start-auto\">\n        <ul>\n            <li v-for=\"{subtitle, href} in links\"><el-link :href=\"href\" target=\"_blank\">{{ subtitle }}</el-link></li>\n        </ul>\n    </el-alert>\n</div>"}